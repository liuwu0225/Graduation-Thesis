#!/usr/bin/env python
#coding=utf8

##########################################################################
# File Name: client.py
# Author: zhangcheng
# mail: zhangc1_os@sari.ac.cn
# Created Time: 2015.3.31
#########################################################################'''

from ctypes import *
import time
import json
from bridge import *
import os
import string

#encrypt file
def sAES_encrypt(inputFile,mildFile,dll,acces_token):
    if (not os.path.exists(inputFile)):
        return "encrypt error: No such file."
    try:
        mildFile = open(mildFile,'wb')
        with open(inputFile,'rb') as f:
            while True:
                mild = create_string_buffer(1024)
                chunk = f.read(1024)
                if not chunk:
                    break
                lens = len(chunk)
                if  lens < 1024:
                    chunk = "%s%s" % (chunk,'\001' * (1024 - lens))
                inputs = c_char_p(chunk)
                user_token = c_char_p(acces_token)
                dll.sAES_encrypt(inputs,mild,user_token)
                mildFile.write(mild.raw)
        mildFile.close()
        return "encrypt success."
    except:
        return "encrypt error."
            
#decrypt file
def sAES_decrypt(mildFile,outFile,dll,acces_token):
    if (not os.path.exists(mildFile)):
        return "decrypt error: no such file."
    try:
        out = open(outFile,'wb')
        with open(mildFile,'rb') as f:
            f.seek(0,2)
            blocks = f.tell() / 1024
            f.seek(0,0)
            while True:
                outPoin = create_string_buffer(1024)
                chunk = f.read(1024)
                if not chunk:
                    break
                inputs = c_char_p(chunk)
                user_token = c_char_p(acces_token)
                dll.sAES_decrypt(inputs,outPoin,user_token)
                if blocks == 1:
                    out.write(outPoin.raw.rstrip('\001'))
                else:
                    out.write(outPoin.raw)
                blocks = blocks -1
        out.close()
        return "decrypt success."
    except:
        return "decrypt error."

def sAES_str_encrypt(req, access_token):
    result = ''
    dll = CDLL("/usr/lib/libsecrypto.so")
    user_token = '{"access_token": "#"}'
    user_token = user_token.replace("#", access_token)
    offset = 0
    lens = len(req)
    tag = True
    while tag:
        buff = create_string_buffer(1024)
        if lens < 1024:
    	    chunk = req[offset:]
            chunk = "%s%s" % (chunk,'\001' * (1024 - lens))
	    tag = False
        else:
	    chunk = req[offset:offset+1024]
	    offset = offset + 1024
	    lens = lens - 1024
        inputs = c_char_p(chunk)
        token = c_char_p(user_token)
        dll.sAES_encrypt(inputs,buff,token)
        result = result + buff.raw
    return result

def sAES_str_decrypt(req, access_token):
    result = ''
    dll = CDLL("/usr/lib/libsecrypto.so")
    user_token = '{"access_token": "#"}'
    user_token = user_token.replace("#", access_token)
    offset = 0
    blocks = len(req)/1024
    while blocks:
        outPoin = create_string_buffer(1024)
        chunk = req[offset:offset+1024]
        inputs = c_char_p(chunk)    
    	token = c_char_p(user_token)
        dll.sAES_decrypt(inputs,outPoin,token)
        result = result + outPoin.raw
        offset = offset + 1024
        blocks = blocks - 1
    end = result1.find('\001')
    return result[0:end]
            
def main(dll,inputf,mild,out):
    start = time.time()
    dll.load_padlock()
    acces_token = accessToken(dll)
    sAES_encrypt(inputf,mild,dll,acces_token)
    sAES_decrypt(mild,out,dll,acces_token)
    
               

if __name__ == '__main__':
    dll = CDLL("/usr/lib/libsecrypto.so")
    #inputf = sys.argv[1] #source
    #mild = sys.argv[2]  #encrypt
    #out = sys.argv[3]   #decrypt
    #if not inputf:
     #   sys.exit(1)
    #if not mild:
     #   sys.exit(2)
    #if not out:    
     #   sys.exit(3)
    #main(dll,inputf,mild,out)
    acces_token = '{"access_token": "TgLk55uR2vWbNd9K6plq3wVL4s2iPTDFcTXjIiSG"}'
    sAES_encrypt('/home/liangjiao/mytest/test.py','/home/liangjiao/mytest/encrytest.py',dll,acces_token)
    sAES_decrypt('/home/liangjiao/mytest/encrytest.py','/home/liangjiao/mytest/decrytest.py',dll,acces_token)
    print 'ok'
    
